DX-Forth for MS-DOS
-------------------

This is the documentation for DX-Forth.  It is divided into two parts:

- A walk-through that introduces new users (even those without
  previous Forth experience) to a few concepts and illustrates some of
  DX-Forth's special features.  However, no attempt is made to teach
  Forth - for this, get hold of an introductory text such as:

    "Forth Programmer's Handbook", Conklin & Rather
    "Programming Forth", Stephen Pelc
    "And so Forth...", J.L. Bezemer

- A technical section for prospective DX-Forth programmers.  It assumes
  the reader has some familiarity with the Forth language programming.

For a detailed listing of DX-Forth words and their use, see DXFORTH.GLO.


Contents:
---------

 1.  Introduction

 1.1   Overview
 1.2   Distribution files
 1.3   Acknowledgments
 1.4   Legal
 1.5   Installation
 1.6   Getting started
 1.7   Source files
 1.8   Screen editor
 1.9   Resident text file editor
 1.10  Command-line interface
 1.11  Machine code assembler
 1.12  Increasing System space
 1.13  Further suggestions
 1.14  Error messages

 2.  Programming reference

 2.1   File system
 2.2   Application and System words
 2.3   Executing applications
 2.4   No Warm-Boot option
 2.5   User Patch area
 2.6   Overlays
 2.7   Multitasking
 2.8   User variables
 2.9   System vectors
 2.10  Deferred words
 2.11  Search order
 2.12  Compiler security
 2.13  Exception handling
 2.14  Exception codes
 2.15  Key codes

 3.  DX-Forth extensions

 3.1   END BREAK
 3.2   OF COND CONT
 3.3   BUILD


1.  Introduction

1.1  Overview

DX-Forth is a Forth language compiler and development system
for MS-DOS 2.x and compatible disk operating systems.  It is
intended to be a complete, easy to use, programming tool for
the creation of DOS applications.

Features include:

 - ANS-FORTH Standard (FORTH-94) *
 - Fast direct-threaded code
 - Generate turnkey applications without compiler overhead
 - Fast floating point and trigonometric functions
 - Forth-94 file I/O
 - DOSLIB application library
 - Multitasking
 - ANS locals
 - Overlays for large applications
 - 8086/87 Forth assembler for CODE words
 - Full source code included

* DX-FORTH 4 generally follows the FORTH-94 Standard but
  does not seek to be strictly compliant.


1.2  Distribution files

See FILES.TXT


1.3  Acknowledgments

No software is written in a vacuum; therefore the author wishes to
gratefully acknowledge all those in the CP/M and Forth communities who
have generously made their source code available for public scrutiny.
Without these to serve as a starting point and source for ideas,
DX-Forth would not have been written.


1.4  Legal

DX-Forth and all the files in this distribution (apart from excerpts
taken from the FORTH-83 and ANS-FORTH documents) are hereby placed into
the PUBLIC DOMAIN by the author.

DX-Forth is an experimental software and is provided without support or
warranty.  The author makes no guarantee as to fitness for purpose, nor
assumes liability for any error, omission, damage or loss caused by the
use of DX-Forth.  Anyone wishing to use this software does so entirely
at their own risk.


1.5  Installation

Not applicable to the MS-DOS version of DX-Forth.


1.6  Getting started

Several versions of the DX-Forth compiler are available:

FORTH.EXE      The forth compiler kernel.  It includes everything
               required to load and compile forth source files.

FORTH-F.EXE    Same as FORTH.EXE but includes software floating point
               and trigonometric functions.  These increase the size
               of the kernel by approximately 3K bytes.

DX.EXE         FORTH-F.EXE with full-screen editor loaded.

FORTH-C.EXE    Same as FORTH-F.EXE but uses "common stack" model
               i.e. floating point items are placed on the data stack
               rather than on a separate stack.

               Note: FORTH-C.EXE is not in the distribution but can
               be generated by rebuilding the system with FMAKE.BAT

First, enter forth by executing FORTH.EXE (or FORTH-F.EXE or DX.EXE)
from the DOS prompt e.g.

     A> FORTH

You will be greeted with DX-Forth's start-up screen showing the
version number and compilation date.  If you executed FORTH-F.EXE
you will also be informed that the floating point functions are
available.

Now type

     FYI

"For Your Information".  It displays information about the current
forth environment including dictionary size, vocabularies, logged
drive and open screenfiles.

To see the names of functions (Forth calls them "words") in the
dictionary, type

     WORDS

<SPACE> key is used to pause/resume the listing or <ESC> to stop.

If you want to see words that only contain 'MOD' then type

     WORDS: MOD

You will notice some words are accompanied by an attribute.

The bold attribute (normally blue) indicates the word resides in the
SYSTEM dictionary.  All other words reside in the APPLICATION
dictionary.  If the brightness attribute is on, it indicates the word
is IMMEDIATE.  Attributes are accumulative.  Thus a word that appears
in bold and has the brightness toggled is both a SYSTEM word and
IMMEDIATE.

Forth users will be familiar with IMMEDIATE words.  SYSTEM words are
peculiar to DX-Forth and are explained in the programming section.

You can capture screen output to a printer e.g.

     PRINTER  WORDS

then restore output to the console with

     CONSOLE

Adding a new function to forth's dictionary is easy.  Let's try the
ubiquitous 'hello world' program.  Type the following paying
attention to the space between  ."  and  Hello .

     : HELLO-WORLD ." Hello world" ;

If you make a mistake entering text you may use the backspace key
<BS> to delete the previous character, or escape key <ESC> to erase
the entire line.

Spaces are important to forth as they distinguish elements within a
forth statement.  Forth syntax is very simple - a forth statement
consists of functions or numbers separated by one or more spaces.
In the example above  :  ."  ;  each represents a distinct forth
function.

You have just compiled a new function or 'word' called HELLO-WORLD.
Now type

     WORDS

This lists all words in the current vocabulary.  Note that
HELLO-WORLD appears at the top of the list since it was the most
recent addition to the dictionary.

Now execute HELLO-WORLD by typing its name.  It should display the
text

     Hello world

Should you wish to enter a quote character '"' within a quote-
delimited string, this is done by entering it twice e.g.

     S" this text includes ""quote"" marks" CR TYPE

produces

     this text includes "quote" marks

Removing a word from the dictionary is even easier.  Type

     FORGET HELLO-WORLD

This discards HELLO-WORLD ... and any forth word you defined after it!
Use WORDS to check that HELLO-WORLD was deleted.

Perhaps you would like to save HELLO-WORLD as your first turnkey DOS
application.  To do this, re-enter the HELLO-WORLD definition if you
discarded it.  Once you have tested it and made sure it works as
expected, save it to disk with

     TURNKEY HELLO-WORLD HELLO

If you now type  DIR *.EXE  you should see HELLO.EXE in the disk
directory.

Now - the most important thing you should know - how to get out of
forth and back to DOS.  Do this now by typing

     BYE

Now that you are back in DOS you may try out your new HELLO program.
You will note that HELLO.EXE executable is considerably smaller in
size than the FORTH.EXE used to create it.  This illustrates one of
DX-Forth's features - turnkey applications may be saved without the
compiler and word headers.  The benefit is that applications take
less disk space, are quicker to load, and have more free memory
available to them when they execute.


1.7  Source files

Forth has traditionally used 'blocks' for mass storage.  Blocks may
hold any type of data including text.  In DX-Forth, blocks are used
primarily to store forth program source.  By convention each
'screen' (the name given to a block that holds forth text) is 16
lines of 64 characters, or 1024 bytes of data.  Non-standard block
sizes are also supported (see B/BUF and C/L in the glossary).

DX-Forth screens are saved as conventional DOS disk files and are
distinguished by a .SCR filetype (some forths use .BLK as the
filetype).

DX-Forth also supports forth source in standard text files.  To load
and compile such a file, use:

     INCLUDE filename[.F]

If no filetype is given then .F is assumed.  Another form is:

     S" filename[.F]" INCLUDED  ( Forth-94 Standard )

Forth source files (text or screen) may be nested to the default
maximum of 6.  More than 6 are accommodated by changing nfd in the
kernel source in which case the return stack should be increased.


1.8  Screen editor

Screen files require a special text editor.  DX-Forth includes such
an editor in the form of SED.SCR.  SED supports machines with a
terminal display of at least 68 x 20 characters.  If yours is less,
e.g. 64 x 16, then use SED64.SCR instead.

The editor is automatically loaded and run by FORTH.EXE or
FORTH-F.EXE by typing

     n SED

where n is the screen number to be edited.  If n is omitted and the
data stack is empty then the editor will use the last LISTed, or if
an error occured, the screen that caused the error.

If you have a slow computer or are working from a floppy disk then
it will be convenient to save a version of forth where the editor is
permanently loaded.  Let's do this now.

From the DOS prompt, load forth and open SED.SCR

     A>FORTH-F SED  ( if no filetype is given .SCR is assumed )

Forth will boot-up with the message 'Using SED.SCR'.  Alternately,
open SED.SCR from within forth with

     USING SED

In DX-FORTH the most recently opened screenfile is termed the
'current' file and all screen and block commands operate on it.
CLOSE closes the 'current' screenfile.  SWAP-FILE permits users
to switch between two open screenfiles.

Once SED.SCR has been opened, you may view the contents of the
file with the LIST command.  0 LIST  displays screen 0,  1 LIST
displays screen 1 etc.  The following shortcuts are provided:

     L  ( -- )   (L)ist the current screen
     N  ( -- )   list the (N)ext screen
     B  ( -- )   list the previous screen i.e. (B)ack
     LS ( -- )   (S)wap screenfiles and (L)ist

Line 0 of each screen is called the index line and traditionally
contains a comment indicating the contents of the screen.  Typing

     0 QX

displays a 'quick index' of 60 screens beginning at screen 0.

To list screens to a printer one could use

     PRINTER  0 LIST  1 LIST  2 LIST  CONSOLE

or more simply

     0 2 SHOW

which prints screens 0 to 2 at three screens per page.

To print all the screens in a source file, type

     LISTING

Now compile the editor into the dictionary with

     1 LOAD

Once loading has completed, typing WORDS will show new commands have
been added to the dictionary.  In addition, FYI reveals some system
memory has been consumed and there is now a new vocabulary in addition
to FORTH - the EDITOR vocabulary.  If you are curious to see what is
in the EDITOR vocabulary, type

     EDITOR WORDS

Now that the editor has been loaded, let's make it permanent by saving
it and the current contents of the forth dictionary as a new executable.

But before doing that you may prefer to use the name EDIT instead of
SED.  That's easily done by creating a synonym e.g.

     AKA SED EDIT

You can now use either SED or EDIT to invoke the screen editor.

Let's finish saving our custom version of DX-Forth to disk.

     SAVE DX.EXE  ( if no filetype is given .EXE is assumed )

Note: DX-Forth comes supplied with DX.EXE so you can omit the above
step if you wish.

For details on using the editor, refer to the SED.TXT documentation
file.


1.9  Resident text file editor

DX-Forth includes TED - a simple text file editor.  As with the screen
editor, text source files may be edited without leaving the forth
environment.  See TED.TXT for further information.


1.10  Command-line interface

DX-Forth allows file opening and command processing from the DOS command
line.  The syntax is:

     A:> FORTH  item1 item2 ... itemn

where:

   item1           filename to be opened (assumed suffix is .SCR)
   item2...itemn   forth command(s) to be executed

Once the command sequence is completed, the DX-Forth sign-on message
appears and control passes to the user.

To bypass file opening, replace item1 with a '-' character.  If no items
are specified then the default screenfile FORTH.SCR is opened if it
exists.

Including BYE at the end of the command sequence will cause an immediate
return to DOS.  This can be very useful and allows use of the forth
compiler within DOS batch files.


1.11  Machine code assembler

Although threaded-code forth generates code that is compact and quite
fast - up to 10 times faster than interpreted BASIC - there may be
occasion when the full speed of machine code is required.

The assembler provided with DX-Forth allows writing of forth 'code'
words.  Code words are simply machine language routines that end with
a jump to NEXT.  Documentation for the assembler may be found in the
file ASM.TXT.


1.12  Increasing System space

The FORTH and FORTH-F executables are supplied with tools and assembler
installed.  If either are not required, the System dictionary space may
be increased accordingly.  To facilitate this, two marker words are
provided:

 -TOOLS  removes the tools and all subsequent words.
 -ASM    removes the assembler and all subsequently defined words.

E.g. To remove TOOLS which is PROTECTed type the following:

     CHECKING OFF  FORGET -TOOLS  CHECKING ON

Note: As of DX-Forth 3.3 for DOS, word headers are stored in their own
segment rather than in the System dictionary.  Consequently there is
now much less need to conserve System dictionary space.


1.13  Further suggestions

If you have worked your way through the previous sections, you now
know your way around DX-Forth - how to list and compile forth screen
files, save new versions of forth and create turnkey applications.

If this is your first encounter with forth, I hope this brief tour
through DX-Forth will encourage you to look further.  Get a book on
forth and learn it - forth really is EASY!

The best way to learn forth (or any language) is by studying examples.
Several simple applications have been provided with DX-Forth.  When
you encounter a forth word which is unfamiliar, find its definition
in the Forth-94 Standard, or the DX-Forth glossary if not a Standard
word.  DX-Forth does some things a little differently from Forth-94
and this will be documented in the DX-Forth glossary.

A sample filecopy program FCOPY is provided in source form.  As well
as illustrating a complete forth application, it also serves as a
primer on using DX-Forth's file functions.  It will show you how to:

- get arguments from the DOS command line
- create file-handles and assign file-buffers
- open disk files
- read data from a disk file
- write data to a disk file
- close disk files
- handle errors

Routines may be extracted for your own use or the entire program can
serve as the basis for a more complex one.

To aid the creation of new command-line applications, we have supplied
NEWAPP.SCR - a skeletal program that allows users to quickly develop
DOS applications.  Using DOSLIB.SCR it provides access to DOS functions
and routine tasks such as command-line parsing and buffered I/O.  See
NEWAPP.TXT for details.


1.14  Error messages

Compiler error messages
-----------------------
"block out of range"        Attempt to access a block past end of
                            file.
"block r/w error"           Error encountered during a block read or
                            write operation.
"no file open"              File operation was requested but no file
                            was open.
"can't open file"           File not found or write-protected.
"can't create file"         Existing file write-protected or disk full.
"can't delete file"         File not found or write-protected.
"can't resize file"         File not found or write-protected.
"can't rename file"         File exists, not found or write-protected.
"can't save file"           Error occurred during save (probably disk
                            full).
"compilation only"          Use only during compilation.
"execution only"            Use only during execution.
"loading only"              Use only during loading.
"definition unbalanced"     Definition is not properly formed e.g.
                            conditional statements (IF ELSE THEN etc)
                            were incorrectly used or the data stack level
                            changed.
"is protected"              Word is located in PROTECTed dictionary.
"is alias"                  Operation on alias not allowed e.g. FORGET.
"invalid name"              Word name length outside the range 1 to 31
                            characters.
"specify filename"          A filename is required but none was given.
"too many files"            Exceeded maximum number of open source files.
"is redefined"              Definition with the same name already exists.
                            Note: this is a warning - not an error.
"is system"                 A System word is being compiled into the
                            Application dictionary. See section 2.2
                            Note: aliases will be displayed using the
                            primary name.
"is undefined"              Word could not be found in the dictionary
                            using the current search order, or was not
                            a valid number.
"no name space"             Header dictionary full.
"stack?"                    Data stack under/overflow.
"r-stack?"                  Return stack under/overflow.
"f-stack?"                  Floating point stack under/overflow.
"invalid chain"             Illegal CHAIN argument. See glossary.

Run-time error messages
-----------------------
Apart from those listed below, DX-Forth does not perform run-time error
checking.  It is the responsibility of the application programmer to
include error checking appropriate to the task.

"HOLD buffer overflow"      The string being built in the HOLD buffer
                            exceeded the maximum size.
"uninitiated DEFER"         A DEFERed word was defined but never
                            initialized with IS.
"exception = [n]"           Exception error code n was executed. See
                            section 2.14 for a list of system and DOS
                            codes. Application-defined error codes are
                            typically represented by a positive number.
"no data space"             Data space or dictionary full.
"not enough RAM"            Insufficient DOS memory.
"wrong DOS version"         Requires DOS version 2.x or later.

Assembler error messages
------------------------
"definition unbalanced"     Definition is not properly formed.
"duplicate label"           Label number was previously used.
"execution only"            Word may be used only during execution.
"invalid label"             Incorrect label number or too many labels
                            used.
"branch out of range"       Exceeded the range of a short relative
                            branch (128 bytes).
"too many references"       Exceeded the maximum number of forward
                            references to labels.
"unresolved reference"      A label was referenced but never defined.


2.  Programming reference

This section contains programming and technical information specific
to DX-Forth.


2.1  File system

DX-Forth uses FORTH-94 disk file management.


2.2  Application and System words

When a word is compiled into DX-Forth, it is added to either the
Application dictionary or the System dictionary.

The above suggests that DX-Forth uses two dictionaries.  In reality,
there is one dictionary physically divided into two parts.  It is this
physical partitioning that enables DX-Forth to generate small turnkey
applications, free of compiler overhead.

Executing the words APPLICATION or SYSTEM causes all subsequent
definitions to be compiled into the corresponding dictionary segment.
The word FYI shows the current compilation dictionary and statistics.

The 'application' dictionary contains words (less their headers) that
are available for use by either TURNKEY applications or by the forth
compiler.

The 'system' dictionary contains words that are used exclusively by the
forth compiler.  Headers of forth words are located in their own
segment.  System words and headers are NOT saved during the generation
of TURNKEY applications.

To see which words are System or Application, type WORDS.  If the word
is displayed with a bold attribute (usually blue), then it resides in
the System dictionary otherwise it resides in the Application dictionary.

Compiling SYSTEM words

Under no circumstances should an application compiled with TURNKEY be
allowed to execute a System word.  Attempting to do so will result in
unpredictable behaviour and failure of the application.

To assist users from inadvertently compiling System words into TURNKEY
applications, DX-Forth will issue a warning message should this be
attempted (assuming WARNING has not been disabled).

Applications saved with TURNKEY-SYSTEM may safely ignore System warnings
as the entire forth dictionary including compiler and headers is saved.

Spurious SYSTEM warnings

It is possible to receive a System warning message that is neither an
error condition, nor results in failure of the turnkey application.
Typically it occurs during the compilation of defining words e.g.

   APPLICATION  WARNING ON

   : BYTE-CONSTANT
     CREATE C,  DOES> C@  ;

Compiling the above causes the following message to appear

   "CREATE is system  C, is system  (;CODE) is system"

DX-Forth is warning the user that words CREATE C, (;CODE) are System
words and are being compiled into the Application dictionary.

The reason this will *not* cause the application to fail is that the
words between CREATE and DOES> inclusive represent the "compiling" part
of the defining word.  As these words are typically never executed when
the application is run, their only impact is the application space they
consume.

To disable such spurious System warning messages one may use WARNING OFF
or precede the offending definition with -? which will turn off WARNING
for that definition only.

Tip: For an alternative way of creating defining words which avoids the
peculiarities of CREATE ... DOES> see BUILD in the glossary.


2.3  Executing applications

Applications can often be fully tested and debugged from within the
forth environment.  However when they are eventually TURNKEYed and
executed from the DOS command-line, there will be differences of which
the programmer should be aware:

 - The amount of unused memory available to an application will vary
   depending on whether it is run from within forth or from the DOS
   command-line.  UNUSED may be used by applications to determine how
   much free memory is currently available.

 - SET-LIMIT allows the programmer to specify a top-of-memory address
   or LIMIT for the application.  The effect of SET-LIMIT is postponed
   until the turnkey application is executed.

 - The memory region at 5Ch and 80h (DOS default FCB and DMA buffer) is
   overwritten by the forth compiler during DIR, RENAME, INCLUDE etc.
   Otherwise, this region is unaffected and may be used by turnkey
   applications to interrogate the DOS command-line.


2.4  No Warm-Boot option

Not applicable to the MS-DOS version of DX-Forth.


2.5  User patch area

Not applicable to the MS-DOS version of DX-Forth.


2.6  Overlays

As DX-Forth resides in a single 64K segment, there will be a limit on
the size of applications that may be compiled.  If larger applications
are needed this can often be achieved with overlays.

Using overlays will require a little more planning of the application.
Some important aspects the programmer must consider are listed below.

 - The resident part of the program must ensure that the correct overlay
   is in memory before executing an overlay word.

 - An overlay must not execute words that exist in other overlays.

 - An overlay must not execute words in the resident part, which in
   turn, execute words in a different overlay.

See OVERLAY.SCR for a demonstration of a simple overlay system.


2.7  Multitasking

A co-operative 'round robin' multi-tasker is provided with DX-Forth.
It permits an application to have several tasks run concurrently.

Refer to the multitasker documentation MULTI.TXT and the source file
MULTI.SCR for further details.


2.8  User variables

In common with most forth systems, DX-Forth has 'user' variables.  User
variables occupy a common region in memory.  They hold various system
and boot up values and are also used for multi-tasking applications.

In DX-Forth the default size of the user area is 128 bytes.  User
variables are defined as follows:

   44 USER VAR1
   46 USER VAR2
   50 USER VAR3 ...

The number preceding USER is the offset in bytes of the variable from
the user base address (given by the variable UP).  Offsets beginning
with 44 decimal are available to applications.  In the above example,
VAR1 occupies 2 bytes (1 cell) at offset 44, VAR2 occupies 4 bytes
(2 cells) at offset 46 etc.  See #USER in the glossary.

As with normal variables, executing the name of a user variable returns
its address.  Unlike normal variables, the literal value of the address
may differ at compile and run time.  In multi-tasking applications the
contents of a user variable may differ between tasks.

Predefined user variables in DX-Forth are:

S0  R0  DP  VOC-LINK  FS0  DPH  DPL  BASE  OUT  CATCHER


2.9  System vectors

SYS-VEC returns the address of the system vector and parameter table.
The table contains default values used by the system, including the
size of the return and floating-point stack, user area and HOLD buffer.
The default values will accomodate most applications but can be changed
should the need arise.  Note that some changes will not take effect
until COLD is executed.  Refer to SYS-VEC in the glossary document for
details.


2.10  Deferred words

The following is a list of DX-Forth words built with DEFER IS .

   /MS  ACCEPT  BEEP  FIND  MS  PAUSE  REFILL  SOUND

The current action of a deferred word may be obtained using:

   ' >BODY @  ( "name" -- xt )  or
   ADDR @     ( "name" -- xt )


2.11  Search order

The dictionary search order is CONTEXT CURRENT FORTH where each
represents a vocabulary or "wordlist".  Complex search orders are
possible using the CHAIN command.


2.12  Compiler security

DX-Forth includes compiler security to detect malformed definitions
and constructs e.g. failing to terminate an IF section with a THEN.

Compiler security words used by DX-Forth are listed in the glossary.
How and when to use them is a topic of its own and is not discussed
here (see the DX-Forth source files for examples of use).

It is sometimes useful to disable balance checking in high-level or
code definitions.  This may be done by temporarily setting variable
CHECKING to false (i.e. zero).  The same technique may be used to
FORGET previously PROTECTed words.  Disabling compiler security is
not without risk and should be undertaken with caution.


2.13  Exception handling

CATCH THROW provide a mechanism for handling errors conditions within
a program.

It is recommended that applications use only positive THROW codes.
Exception values in the range -1 to -4095 are reserved by ANS-FORTH
for use by the system.  See: "Exception codes"


2.14  Exception codes

DX-Forth implements only a subset of ANS-FORTH Standard exception
codes.  Codes in the range -257 to -511 are reserved for DOS related
errors.

DX-Forth exception codes:

   0             no error
  -1             ABORT
  -2             ABORT"
  -256           reserved
  -257 to -511   DOS error code

The correlation between DOS error code and DX-Forth exception code
is given below:

  Forth     DOS
      0       0     no error
   -511       1     invalid function number
   -510       2     file not found
   -509       3     path not found
   -508       4     too many open files
   -507       5     access denied
   -506       6     invalid handle
   -505       7     memory control block destroyed
   -504       8     insufficient memory
   -503       9     memory block address invalid
   -502      10     environment invalid
   -501      11     format invalid
   -499      12     access code invalid
   -498      13     data invalid
   -497      14     reserved
   -496      15     invalid drive
   -495      16     attempted to remove current directory
   -494      17     not same device
   -493      18     no more files
    ...     ...
   -257     255     unspecified error e.g. disk full

Note: To convert an exception code in the range -257 to -511 to its
corresponding DOS error code, use: 255 AND


2.15  Key codes

DX-Forth supports IBM-PC extended keystrokes and enhanced keyboards.
For ease of use, two-byte extended keystrokes are returned as single
values.  The codes below are for an enhanced 101-key US keyboard.
Codes 32-126 and 128-255 are not shown.

   Key      Code          Key     Code          Key       Code
   ----     -----         ----    ------        ----      ------
            00 0          Alt F  121 289        Ctrl F7  164 356
   Ctrl A   01 1          Alt G  122 290        Ctrl F8  165 357
   Ctrl B   02 2          Alt H  123 291        Ctrl F9  166 358
   Ctrl C   03 3          Alt J  124 292       Ctrl F10  167 359
   Ctrl D   04 4          Alt K  125 293         Alt F1  168 360
   Ctrl E   05 5          Alt L  126 294         Alt F2  169 361
   Ctrl F   06 6          Alt ;  127 295         Alt F3  16A 362
   Ctrl G   07 7          Alt '  128 296         Alt F4  16B 363
   Ctrl H   08 8          Alt `  129 297         Alt F5  16C 364
   Ctrl I   09 9                 12A 298         Alt F6  16D 365
   Ctrl J   0A 10         Alt \  12B 299         Alt F7  16E 366
   Ctrl K   0B 11         Alt Z  12C 300         Alt F8  16F 367
   Ctrl L   0C 12         Alt X  12D 301         Alt F9  170 368
   Ctrl M   0D 13         Alt C  12E 302        Alt F10  171 369
   Ctrl N   0E 14         Alt V  12F 303     Ctrl Prtsc  172 370
   Ctrl O   0F 15         Alt B  130 304      Ctrl Left  173 371
   Ctrl P   10 16         Alt N  131 305     Ctrl Right  174 372
   Ctrl Q   11 17         Alt M  132 306       Ctrl End  175 373
   Ctrl R   12 18         Alt ,  133 307      Ctrl PgDn  176 374
   Ctrl S   13 19         Alt .  134 308      Ctrl Home  177 375
   Ctrl T   14 20         Alt /  135 309          Alt 1  178 376
   Ctrl U   15 21                136 310          Alt 2  179 377
   Ctrl V   16 22       * Alt *  137 311          Alt 3  17A 378
   Ctrl W   17 23                138 312          Alt 4  17B 379
   Ctrl X   18 24                139 313          Alt 5  17C 380
   Ctrl Y   19 25                13A 314          Alt 6  17D 381
   Ctrl Z   1A 26            F1  13B 315          Alt 7  17E 382
   Ctrl [   1B 27            F2  13C 316          Alt 8  17F 383
   Ctrl \   1C 28            F3  13D 317          Alt 9  180 384
   Ctrl ]   1D 29            F4  13E 318          Alt 0  181 385
   Ctrl ^   1E 30            F5  13F 319          Alt -  182 386
   Ctrl _   1F 31            F6  140 320          Alt =  183 387
                             F7  141 321      Ctrl PgUp  184 388
  Ctrl <-   7F 127           F8  142 322            F11  185 389
           100 256           F9  143 323            F12  186 390
  Alt Esc  101 257          F10  144 324      Shift F11  187 391
           102 258               145 325      Shift F12  188 392
           103 259               146 326       Ctrl F11  189 393
           104 260         Home  147 327       Ctrl F12  18A 394
           105 261           Up  148 328        Alt F11  18B 395
           106 262         PgUp  149 329        Alt F12  18C 396
           107 263      * Alt -  14A 330        Ctrl Up  18D 397
           108 264         Left  14B 331       * Ctrl -  18E 398
           109 265          * 5  14C 332       * Ctrl _  18F 399
           10A 266        Right  14D 333                 190 400
           10B 267      * Alt +  14E 334      Ctrl Down  191 401
           10C 268          End  14F 335       Ctrl Ins  192 402
           10D 269         Down  150 336       Ctrl Del  193 403
   Alt <-  10E 270         PgDn  151 337       Ctrl Tab  194 404
Shift Tab  10F 271          Ins  152 338         Ctrl /  195 405
    Alt Q  110 272          Del  153 339       * Ctrl *  196 406
    Alt W  111 273     Shift F1  154 340       Alt Home  197 407
    Alt E  112 274     Shift F2  155 341         Alt Up  198 408
    Alt R  113 275     Shift F3  156 342       Alt PgUp  199 409
    Alt T  114 276     Shift F4  157 343                 19A 410
    Alt Y  115 277     Shift F5  158 344       Alt Left  19B 411
    Alt U  116 278     Shift F6  159 345                 19C 412
    Alt I  117 279     Shift F7  15A 346      Alt Right  19D 413
    Alt O  118 280     Shift F8  15B 347                 19E 414
    Alt P  119 281     Shift F9  15C 348        Alt End  19F 415
    Alt [  11A 282    Shift F10  15D 349       Alt Down  1A0 416
    Alt ]  11B 283      Ctrl F1  15E 350       Alt PgDn  1A1 417
Alt Enter  11C 284      Ctrl F2  15F 351        Alt Ins  1A2 418
           11D 285      Ctrl F3  160 352        Alt Del  1A3 419
    Alt A  11E 286      Ctrl F4  161 353        * Alt /  1A4 420
    Alt S  11F 287      Ctrl F5  162 354        Alt Tab  1A5 421
    Alt D  120 288      Ctrl F6  163 355    * Alt Enter  1A6 422

(*) on keypad

Note:

 - Codes 389 and above are only available on AT-class machines
   fitted with an enhanced keyboard

 - DOS versions prior to 4.0 do not support enhanced keys
   irrespective of the hardware (though the BIOS may)


3.  DX-Forth extensions

DX-Forth includes non-standard extensions and practices the author has
found beneficial.  Those more frequently used are summarized below.
Please refer to the DX-Forth glossary document for further information.

3.1  END BREAK

DX-Forth has introduced the macros END and BREAK.  These replace the
sequences EXIT THEN and LEAVE THEN respectively.

3.2  OF COND CONT

OF COND CONT is an alternative to Forth-94 CASE OF ENDOF ENDCASE that
avoids certain restrictions of the latter.

3.3  BUILD

An alternative to CREATE DOES>/;CODE that takes advantage of DX-Forth's
split dictionary organization.


