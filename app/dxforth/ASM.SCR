\ 8086 assembler - information                                                                                                  An 8086 Forth assembler for DX-FORTH                                                                                            Based on F83 assembler                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          \ load block                                                    forth definitions  hex                                          sys @  system  warning @  warning off                                                                                           marker -ASM                                                                                                                     cr ." loading 8086 Assembler "  2 #screens 1- thru                                                                              forth definitions  decimal  warning !  sys !                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    \ vocabularies                                                  vocabulary ASSEMBLER immediate  assembler definitions           vocabulary HIDDEN immediate     hidden definitions              chain assembler                                                                                                                 2variable avoc                                                                                                                  : big? ( n -- flag )  80 -80 within ;                                                                                           : rel ( a1 a2 -- offs )                                           1+ - dup big? abort" branch out of range" ;                                                                                   defer !lb  ' noop is !lb                                        defer ?lb  ' noop is ?lb                                                                                                                                                                        \ addressing modes                                              assembler definitions  hidden                                                                                                   800 constant #       809 constant )       812 constant []                                                                       80 constant [BX+SI]  89 constant [BX+DI]  92 constant [BP+SI]   9B constant [BP+DI]  A4 constant [SI]     AD constant [DI]      B6 constant [BP]     BF constant [BX]                                                                                           aka [BX+SI] [SI+BX]  aka [BX+DI] [DI+BX]                        aka [BP+SI] [SI+BP]  aka [BP+DI] [DI+BP]                                                                                                                                                                                                                                                                                                                                                        \ registers                                                     00 constant AL  09 constant CL  12 constant DL  1B constant BL  24 constant AH  2D constant CH  36 constant DH  3F constant BH                                                                  40 constant AX  49 constant CX  52 constant DX  5B constant BX  64 constant SP  6D constant BP  76 constant SI  7F constant DI                                                                  C0 constant ES  C9 constant CS  D2 constant SS  DB constantoperators                                                     hidden definitions                                                                                                              : reg  constant does> c@ swap FFC0 and = 1 and ;                                                                                ( 00 reg 8? )   40 reg 16?   80 reg m?   C0 reg s?                                                                              0 value siz  ( byte/word )                                      0 value isf  ( far on/off )                                                                                                     : !siz ( -- )  1 to siz ;   \ default is WORD                   : !seg ( -- )  0 to isf ;   \ default is FAR off                                                                                                                                                                                                                                                                                \ operators                                                     : r?   ( n -- flag )   0FFC0 and 80 < ;                         : low  ( n -- mask )   7 and ;                                  : mid  ( n -- mask )   38 and ;                                 : op,  ( n op -- )     or c, ;                                  : w,   ( op mr -- )    16? op, ;                                : siz, ( op -- op' )   siz op, ;                                : ,c,  ( n f -- )      if , end  c, ;                           : r,   ( mr1 mr2 -- )  mid swap low or C0 op, ;                 : esc, ( m -- )        D8 op, ;                                                                                                                                                                                                                                                                                                                                                                                                                                 \ operators                                                     : m, ( disp mr m -- )                                             mid  over ) = if  6 op, drop ,  end                             over low or -rot [BP] = over 0= and                             if  swap 40 op, c,  end  tuck big?                              if  80 op, ,  end  over                                         if  40 op, c,  end  op, ;                                                                                                     : ow, ( mr op -- mr )  over w, ;                                : wm, ( disp mem reg op -- )  ow, m, ;                          : rm, ( mr reg -- )  over r? if  r,  end  m, ;                  : wr, ( r/m r op -- )  2 pick dup r?                              if  w, r,  else  drop siz, m,  then  !siz ;                   : far? ( n1 -- n2 )  isf or  !seg ;                                                                                                                                                             \ instruction class                                             : m1  constant does> c@ c, ;                                    : m2  constant does> c@ c, 0A c, ;                              : m3  constant does> c@ c, dup if  here rel  then  c, ;         : m4  constant does> c@ c, m, ;                                 : m5  constant does> c@ siz, !siz ;                             : m7  constant does> c@ F6 wr, ;                                : m8  constant does> c@ >r  dup r? if  dup DX =                   if swap then  else  rot  then  16?  r> or                       swap # = if  c, c,  end  08 op, ;                             : m9  constant does> c@ over 16?                                  if  40 or swap low op,  end  FE wr, ;                         : ma  constant does> c@  over CL = if  nip D2                     else  over 1 = if nip then  D0  then  wr, ;                                                                                                                                                   \ instruction class                                             : mb  constant does> c@ dup far? c,  1 and 0= if  ,  then ;                                                                     : mc  constant does>  over ) = if                                   nip  c@  isf                                                    if  1 and if  EA  else  9A  then  c,  swap , ,  !seg            end  swap here - 2- swap  2dup 1 and  swap big? 0= and          if  2 op, c,  end  c,  1- ,  end                              over [] = if  nip  ) swap  then                                 0FF c, 1+ c@ far?  rm, ;                                                                                                      : md  constant , does>  over r?                                   if  c@ swap low op,  end  1+ over s?                            if  c@ low swap mid op,  end                                    count swap c@ c,  m, ;                                                                                                        \ instruction class                                             : me  constant does>  c@ >r                                       dup r? if  over r?                                                if  r> ow, swap r,  end  over dup m? swap ) = or                if  r> 2 or wm,  end ( #) nip dup low 0= ( acc?)                if  r> 4 or ow, 16? ,c,  end                                    over big?  over 16?  2dup and                                   -rot  swap invert  2 and  or  80 op,                            swap low C0 or  r> op,  ,c,  end                              ( mem)  rot dup r? if  r> wm,  end                              ( #) drop  2 pick big?                                          dup invert  2 and  80 or siz,                                   -rot r> m,  siz and ,c,  !siz ;                                                                                                                                                                                                                               \ mnemonics                                                     assembler definitions  hidden                                                                                                   : TEST ( src dst -- )                                             dup r? if  over r?                                                if  84 ow, swap r,  end  over dup m? swap ) = or                if  84 wm, end ( #) nip dup low 0= ( acc?)                      if  A8 ow,  else  F6 ow,  dup low  C0 op,  then                 16? ,c,  end                                                  ( mem)  rot dup r? if  84 wm,  end                              ( #) drop  F6 siz,  0 m,  siz ,c,  !siz ;                                                                                                                                                                                                                                                                                                                                                     \ mnemonics                                                     : MOV ( src dst -- )                                              dup s? if  8E c, rm,  end  dup r?                               if  over ) = over low 0= and                                      if  A0 swap w, drop ,  end  over s?                             if  swap 8C c, r,  end  over # =                                if  nip  dup 16? 8 * swap low over or B0 op, ,c,                end  8A ow, rm,  end                                          ( mem)  rot dup s? if  8C c, m,  end                            # of  C6 siz, 0 m,  siz ,c,  !siz  end                          over ) = over low 0= and if  A2 swap w, drop ,  end             88 ow, rm, ;                                                                                                                                                                                                                                                                                                                  \ mnemonics                                                     : XCHG ( mr1 mr2 -- )                                             dup r? if  over r? if                                             over AX = if swap then                                          AX of  low 90 op,  end  then                                  else  rot  then  dup 16? to siz  86 wr, ;                                                                                     : ESC ( src ext-opc -- )  low D8 op, rm, ;                                                                                      : INT ( n -- )  3 of  CC  else  CD c,  then  c, ;                                                                               \ : SEG ( seg -- )  mid 26 op, ;                                                                                                                                                                                                                                                                                                \ mnemonics                                                     26 m1 ES:       27 m1 DAA       2E m1 CS:       2F m1 DAS       36 m1 SS:       37 m1 AAA       3E m1 DS:       3F m1 AAS       90 m1 NOP       98 m1 CBW       99 m1 CWD       9B m1 WAIT      9C m1 PUSHF     9D m1 POPF      9E m1 SAHF      9F m1 LAHF      CE m1 INTO      CF m1 IRET      D7 m1 XLAT      F0 m1 LOCK      F2 m1 REPNZ     F3 m1 REPZ      aka REPZ REP    F4 m1 HLT       F5 m1 CMC       F8 m1 CLC       F9 m1 STC       FA m1 CLI       FB m1 STI       FC m1 CLD       FD m1 STD                                                                                       D4 m2 AAM       D5 m2 AAD                                                                                                                                                                                                                                                                                                                                                                       \ mnemonics                                                     70 m3 JO        71 m3 JNO       72 m3 JC        aka JC JB       73 m3 JNC       aka JNC JNB     74 m3 JZ        75 m3 JNZ       76 m3 JNA       77 m3 JA        78 m3 JS        79 m3 JNS       7A m3 JPE       7B m3 JPO       7C m3 JL        7D m3 JNL       7E m3 JNG       7F m3 JG        E0 m3 LOOPNZ    E1 m3 LOOPZ     E2 m3 LOOP      E3 m3 JCXZ      EB m3 JU                                                                                        8D m4 LEA       C4 m4 LES       C5 m4 LDS                                                                                       A4 m5 MOVS      A6 m5 CMPS      AA m5 STOS      AC m5 LODS      AE m5 SCAS                                                                                                                                                                                                                                                                                                                      \ mnemonics                                                     10 m7 NOT       18 m7 NEG       20 m7 MUL       28 m7 IMUL      30 m7 DIV       38 m7 IDIV                                                                                                      E4 m8 IN        E6 m8 OUT       00 m9 INC       08 m9 DEC                                                                       00 ma ROL       08 ma ROR       10 ma RCL       18 ma RCR       20 ma SHL       28 ma SHR       38 ma SAR                                                                                       C2 mb +RET      C3 mb RET       10E8 mc CALL    20E9 mc JMP                                                                     8F07 58 md POP  FF36 50 md PUSH                                                                                                 00 me ADD       08 me OR        10 me ADC       18 me SBB       20 me AND       28 me SUB       30 me XOR       38 me CMP                                                                       \ interface                                                     \ modifiers                                                     : BYTE ( -- )  0 to siz ;   \ BYTE operation                    : FAR  ( -- )  8 to isf ;   \ FAR operation                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     \ interface                                                     \ kernel addresses                                              'next       1-            constant APUSH                        'next       2-            constant DPUSH                        ' :         1+ dup @ + 2+ constant DOCOL                        ' exit      9 +           constant EXIT1                        ' again     1+ @          constant BRAN                         ' ticks     1+ dup @ + 2+ constant TOD                          ' wait-tick 1+ dup @ + 2+ constant TSYNC                        ' upcase    2+ dup @ + 2+ constant UPC                                                                                                                                                                                                                                                                                                                                                                                                                          \ interface                                                     \ macros                                                        : NEXT  !siz  lods  ax jmp ;   \ in-line NEXT                   : 1PUSH  apush ) jmp ;         \ enter NEXT pushing AX          : 2PUSH  dpush ) jmp ;         \ enter NEXT pushing DX AX       : U# ( user -- offs )  up @ - ;  \ USER offset number           : [U]  up ) di mov u# # di add 0 [di] ;  \ USER addrinterface                                                     \ reset/check labels and stack point                            : READY ( -- sp )  csp @  !lb  !csp ;                           : CHECK ( sp -- )  ?csp  ?lb  csp ! ;                                                                                           : ASM]  avoc @ context ! ;                                                                                                      : END-CODE ( -- )  ?exec  check  asm]  smudge ;                                                                                 \ end macro definition                                          : ENDM ( sys -- )                                                 postpone ;  avoc 2@ context 2!  sys ! ; immediate                                                                                                                                                                                                                                                                             \ interface                                                     \ enter high-level forth, saving SI                             : C: ( -- )  docol ) call  asm]  ] ;                                                                                            forth definitions  assembler hidden                                                                                             : [ASM ( -- )                                                     context @ avoc !  postpone assembler  !siz  !seg                postpone [ ; immediate                                                                                                        : LABEL ( -- )                                                    ?exec  create  smudge  postpone [asm  ready ; immediate                                                                       : CODE ( -- )  postpone label  3 -allot ; immediate                                                                                                                                             \ interface                                                     : ;CODE ( -- )                                                    postpone (;code)  postpone [asm  ready ; immediate                                                                            \ begin macro definition                                        : MACRO ( -- sys )                                                sys @  context 2@ avoc 2!  postpone assembler  definitions      system  : ;                                                                                                                   \ exit high-level forth, restoring SI                           : ;C ( -- )  exit1 compile,  postpone [asm ; immediate                                                                                                                                                                                                                                                                                                                                          \ labels                                                        hidden definitions  forth                                                                                                       #20 constant ml  \ max labels                                   #25 constant mf  \ max forward references                                                                                       \ arrays                                                        :noname ( n -- adr )  count rot * + ;  ( xt)                    dup build lt  1 cells  dup c,  ml * allot  \ labels                 build ft  2 cells  dup c,  mf * allot  \ fwd refs                                                                           \ reset labels                                                  :noname ( -- )                                                    0 lt [ ml cells ] literal erase                                 0 ft [ mf cells 2* ] literal erase ;  is !lb  !lb                                                                             \ labels                                                        \ resolve all forward references                                :noname ( -- )                                                    mf 0 do                                                           i ft 2@  dup if ( fwd ref )                                       swap  lt @  dup 0= abort" unresolved label"                     ( target label )  over  dup 1- c@ ( opc )                       dup 70 80 within  over E0 E4 within  or                         over EB =  or  if ( short )  drop  rel swap c!                  else  dup E8 EA within ( call/jmp )                               if  drop  2+ - swap !                                           else  dup C0 B8 within  swap A4 A0 within  and                        ( handle 3/4 byte instr)  - !  drop                       then then                                                   else  2drop  then  loop ;  is ?lb                                                                                           \ labels                                                        \ check label number                                            : ?l ( n -- n )                                                   1-  dup ml 0 within abort" invalid label" ;                                                                                   \ add to forward ref table                                      : fwd ( n a -- a )                                                swap  here 1+ ( skip opcode) ( a n loc)                         mf 1+  0 do  \ find empty slot                                    i mf = abort" too many refs"                                    i ft  dup @ if ( occupied) drop                                 else  tuck !  cell+ !  0 0  break                             loop 2drop ;                                                                                                                                                                                                                                                  \ labels                                                        assembler definitions  hidden                                                                                                   \ declare label                                                 : $: ( n -- )                                                     ?l lt  dup @ abort" dup label"  here swap ! ;                                                                                 \ get label address                                             : $ ( n -- a )                                                    ?l  dup lt @  ( n adr) dup if  nip  end  fwd