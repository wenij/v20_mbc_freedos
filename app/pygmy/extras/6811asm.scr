***  Version 2 of Forth assembler for Motorola 68HC11  ***      Copyright 1989-2007 Frank C. Sergeant.                          See license20040130.txt or http://pygmy.utoh.org/license.html                                                                   I can be reached by email at frank@pygmy.utoh.org.              See the file 6811ASM.DOC for more info and important DISCLAIMER.See the file 6811ASM.DOW for shadow block comments.             In editor, Ctrl-A switches between source and shadow blocks.                                                                    This version corrects some errors, especially the               STX, & STY, (extended mode) instructions.                       This runs under Pygmy on IBM PC and creates 68HC11 machine code.To run on a 68HC11, change the value of INTEL to zero.                                                                          This is not fully tested.  Use at your own risk (naturally).                                                                    ( load block for 68HC11 assembler )                             ( see notes on previous screenvariables and addressing modes)                                                                                          -1 CONSTANT INTEL               ( change to zero for Motorola )                                                                 : W,    ( n -)  INTEL IF FLIP THEN  ,  ;                                                                                        ( Modes )                                                            0 CONSTANT  #,    ( immediate   )                              10 CONSTANT  DIR   ( direct      )                              20 CONSTANT  ,X    ( indexed by X)                            1820 CONSTANT  ,Y    ( indexed by Y)                              30 CONSTANT  #)    ( extended,  i.e. "immediate indirect" )                                                                                                                                                                                                                                                                 HEX  ( inherent op codes )                                                                                                      : INH  ( opcode -) ( -)  CREATE  C,  DOES> C@ C,  ;             ( one-byte inherent opcodes)                                      1B INH ABA,    3A INH ABX,    05 INH ASLD,   11 INH CBA,        0C INH CLC,    0E INH CLI,    0A INH CLV,    19 INH DAA,        34 INH DES,    09 INH DEX,    03 INH FDIV,   02 INH IDIV,       31 INH INS,    08 INH INX,    05 INH LSLD,   04 INH LSRD,       3D INH MUL,    01 INH NOP,    36 INH PSHA,   37 INH PSHB,       3C INH PSHX,   32 INH PULA,   33 INH PULB,   38 INH PULX,       3B INH RTI,    39 INH RTS,    10 INH SBA,    0D INH SEC,        0F INH SEI,    0B INH SEV,    CF INH STOP,   3F INH SWI,        16 INH TAB,    06 INH TAP,    17 INH TBA,  ( 00 INH TEST, )     07 INH TPA,    30 INH TSX,    35 INH TXS,    3E INH WAI,        8F INH XGDX,   48 INH ASLA,   58 INH ASLB,   47 INH ASRA,       57 INH ASRB,   4F INH CLRA,   5F INH CLRB,   43 INH COMA,     HEX  ( inherent op codes  - continued )                                                                                           53 INH COMB,   4A INH DECA,   5A INH DECB,  4C INH INCA,        5C INH INCB,   48 INH LSLA,   58 INH LSLB,  44 INH LSRA,        54 INH LSRB,   40 INH NEGA,   50 INH NEGB,  49 INH ROLA,        59 INH ROLB,   46 INH RORA,   56 INH RORB,  4D INH TSTA,        5D INH TSTB,                                                                                                                                                                                  : INH2  ( opcode -) ( -)  CREATE  ,  DOES> @  W,  ;             ( two byte inherent op codes )                                                                                                    183A INH2 ABY,    1809 INH2 DEY,    1808 INH2 INY,              183C INH2 PSHY,   1838 INH2 PULY,   1830 INH2 TSY,              1835 INH2 TYS,    188F INH2 XGDY,                                                                                             HEX  ( helper words  plus simple 16-bit operand instructions )                                                                  : opcode, ( xxyy | 00yy -) BYTES ( ls ms) ?DUP IF C, THEN C, ;                                                                  : operand, ( u mode -)   #) = IF ( extended) W, ELSE C, THEN ;                                                                  : operand2, ( u mode -)                                           DUP #) = SWAP #, = OR IF ( ext | imm)  W, ELSE C, THEN ;                                                                      ( any registers or immediate operands are 16 bits)              : OP2 ( c -)  ( operand mode -)  CREATE C,                        DOES>  C@ OVER + opcode, operand2,  ;                                                                                            C3 OP2 ADDD,     CC OP2 LDD,     8E OP2 LDS,                    CD OP2 STD,      83 OP2 SUBD,    8F OP2 STS,                                                                                 HEX  ( 8-bit operands)                                                                                                          : OP3 ( c -)  ( operand mode -)  CREATE C,                        DOES>  C@ OVER + opcode, operand,  ;                                                                                            89 OP3 ADCA,     C9 OP3 ADCB,    8B OP3 ADDA,    CB OP3 ADDB,   84 OP3 ANDA,     C4 OP3 ANDB,    85 OP3 BITA,    C5 OP3 BITB,   81 OP3 CMPA,     C1 OP3 CMPB,    88 OP3 EORA,    C8 OP3 EORB,   86 OP3 LDA,      C6 OP3 LDB,     8A OP3 ORA,     CA OP3 ORB,    82 OP3 SBCA,     C2 OP3 SBCB,    87 OP3 STA,     C7 OP3 STB,    80 OP3 SUBA,     C0 OP3 SUBB,    48 OP3 ASL,     47 OP3 ASR,    4F OP3 CLR,      43 OP3 COM,     4A OP3 DEC,     4C OP3 INC,    4E OP3 JMP,      8D OP3 JSR,     48 OP3 LSL,     44 OP3 LSR,    40 OP3 NEG,      49 OP3 ROL,     46 OP3 ROR,     4D OP3 TST,                                                                                                                                  ( relative branch & call instructions)                          : IN-RANGE? ( distance - distance flag)                           DUP     -128  127  BETWEEN  ( distance flag)  ;                                                                               : ?IN-RANGE ( distance - distance)                                IN-RANGE? NOT  ( distance flag)  ABORT"  out of range "   ;                                                                   : REL  ( c -)  ( a -)                                             CREATE C, DOES> C@ C, HERE 1+ - ?IN-RANGE C,  ;               HEX                                                               24 REL BCC,    25 REL BCS,    27 REL BEQ,    2C REL BGE,        2E REL BGT,    22 REL BHI,    24 REL BHS,    2F REL BLE,        25 REL BLO,    23 REL BLS,    2D REL BLT,    2B REL BMI,        26 REL BNE,    2A REL BPL,    20 REL BRA,    21 REL BRN,        8D REL BSR,    28 REL BVC,    29 REL BVS,                                                                                     HEX  ( Bit branch, set, and clear instructions)                                                                                 : BITREL, ( destination  mask  operand  mode  opcode -)           + DUP ,X ( ie $20) AND 2/ 2/ 2/ - opcode, ( dest mask operand)  C, C, ( dest)  HERE 1+ - ?IN-RANGE C,  ;                                                                                      : BRCLR, 03 BITREL, ;      ( e.g. HERE $20 SCSR DIR BRSET, )    : BRSET, 02 BITREL, ;      (  or  HERE $80 SCSR  ,Y BRSET, )                                                                    : BIT, ( mask operand mode opcode -)                                   + DUP ,X ( ie $20) AND 2/ 2/ - opcode,                          ( mask operand)  C, C,  ;                                                                                                : BCLR, 05 BIT, ;      ( e.g. $80 SCSR DIR BCLR, )              : BSET, 04 BIT, ;      (  or  $80     3 ,Y BCLR,  )                                                                             HEX  ( The weird ones)  ( 16-bit operand instructions)                                                                          : OP4 ( c -)  ( operand mode -)  CREATE ,                         DOES>  @ OVER + OVER ,Y = IF 00FF AND CD00 OR THEN                    opcode, operand2,  ;                                                                                                      1A83 OP4 CPD,   00CE OP4 LDX,   008C OP4 CPX,   00CF OP4 STX,                                                                 : OP5 ( c -)  ( operand mode -)  CREATE ,                         DOES>   @ OVER + OVER ,X =  200 AND + ( ?make prebyte = 1A)                      OVER ,Y = 1800 AND - ( ?make prebyte = 18)            opcode, operand2,  ;                                                                                                     188C OP5 CPY,   18CE OP5 LDY,   18CF OP5 STY,                                                                                                                                                 HEX  ( "structured" assembler)                                                                                                  : cc ( c -) ( - c) CONSTANT ;                                                                                                     24 cc CC,        25 cc CS,        26 cc <>,        27 cc 0=,    2C cc >=,        2D cc <,         2E cc >,         2F cc <=,    22 cc U>,        23 cc U<=,       2A cc PL,        2B cc 0<,    20 cc ALWAYS,    21 cc NEVER,     28 cc -OV,       29 cc OV,                                                                                                                                  : NOT, ( cc - opposite-cc) 1 XOR ;                                                                                                                                                                                                                                                                                                                                                              ( "structured" assembler  continued  )                          HEX                                                             : IF, ( cc - here )  NOT, C,  HERE  0 C,  ;                     : THEN, ( back-addr -) HERE OVER 1+ - SWAP C! ;                 : ELSE, ( back-addr - here)  HERE OVER 1-  - SWAP C!                  ALWAYS, C, HERE  0 C, ;                                   : BEGIN, ( - here)  HERE  ;                                     : AGAIN, ( here -)  BRA,  ;  ( ** better be in range!! ** )     : WHILE, ( here1 cc - here1 here2) IF,   SWAP  ;                : REPEAT, ( here1 here2 -)  AGAIN, THEN, ;                      : UNTIL,  ( here cc -) NOT, C,  HERE 1+ - C, ;                                                                                                                                                                                                                                                                                                                                                  ( END-CODE  <<  >>  )                                           EXIT                                                            ( The regular Pygmy 80x86 assembler words << and >> still         work for use with the 6811ASM, but the following equivalents    may be needed if loading the 6811ASM in other environments )                                                                  : END-CODE ( -)  ;                                              : CODE ( -) HEAD  ;                                             : << ( - a depth)  HERE DEPTH ;  ( for dumping code to screen)  : >> ( a depth -)                ( ditto)                            DEPTH 1- - ABORT" bad stack" CR BASE @ PUSH HEX                 DUP 4 U.R SPACE  HERE OVER - FOR C@+ 3 U.R NEXT DROP            POP BASE !  SPACE   ;                                      To examine snippets of machine code, bracket your               assembly code with << and >>, e.g.   << $1B #, CMPA, >>                                                                         